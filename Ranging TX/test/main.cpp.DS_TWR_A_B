#include <Arduino.h>
#include <WiFi.h>
#include <esp_now.h>
#include "dw3000.h"


#define ESP_NOW_CH 1

esp_now_peer_info_t slave_id;

uint8_t espNowdata;

typedef struct struct_message {
  char a[85];
} struct_message;

struct_message myData;

extern void test_run_info(unsigned char *data);

/* Example application name and version to display on LCD screen. */
#define APP_NAME "DS TWR INIT v1.0"

const uint8_t PIN_RST = 27; // reset pin
const uint8_t PIN_IRQ = 34; // irq pin
const uint8_t PIN_SS = 4; // spi select pin


/* Default communication configuration. We use default non-STS DW mode. */
static dwt_config_t config = {
    5,                /* Channel number. */
    DWT_PLEN_128,     /* Preamble length. Used in TX only. */
    DWT_PAC8,         /* Preamble acquisition chunk size. Used in RX only. */
    9,                /* TX preamble code. Used in TX only. */
    9,                /* RX preamble code. Used in RX only. */
    1,                /* 0 to use standard 8 symbol SFD, 1 to use non-standard 8 symbol, 2 for non-standard 16 symbol SFD and 3 for 4z 8 symbol SDF type */
    DWT_BR_6M8,       /* Data rate. */
    DWT_PHRMODE_STD,  /* PHY header mode. */
    DWT_PHRRATE_STD,  /* PHY header rate. */
    (129 + 8 - 8),    /* SFD timeout (preamble length + 1 + SFD length - PAC size). Used in RX only. */
    DWT_STS_MODE_OFF, /* STS disabled */
    DWT_STS_LEN_64,   /* STS length see allowed values in Enum dwt_sts_lengths_e */
    DWT_PDOA_M0       /* PDOA mode off */
};

/* Inter-ranging delay period, in milliseconds. */
#define RNG_DELAY_MS 1000

/* Default antenna delay values for 64 MHz PRF. See NOTE 1 below. */
#define TX_ANT_DLY 16385
#define RX_ANT_DLY 16385

/* Frames used in the ranging process. See NOTE 2 below. */
static uint8_t tx_poll_msg_A[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'W', 'A', 'V', 'E', 0x21 };
static uint8_t rx_resp_msg_A[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'V', 'E', 'W', 'A', 0x10, 0x02, 0, 0 };
static uint8_t tx_final_msg_A[] = { 0x41, 0x88, 0, 0xCA, 0xDE, 'W', 'A', 'V', 'E', 0x23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

static uint8_t tx_result_msg_A[] = {0x41, 0x88, 0, 0xCA, 0xDE, 'R', 'S', 'L', 'T', 0x23, 0};


static uint8_t tx_poll_msg_B[] = { 0x41, 0x88, 0, 0xCA, 0xDB, 'W', 'A', 'V', 'E', 0x21 };
static uint8_t rx_resp_msg_B[] = { 0x41, 0x88, 0, 0xCA, 0xDB, 'V', 'E', 'W', 'A', 0x10, 0x02, 0, 0 };
static uint8_t tx_final_msg_B[] = { 0x41, 0x88, 0, 0xCA, 0xDB, 'W', 'A', 'V', 'E', 0x23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

static uint8_t tx_result_msg_B[] = {0x41, 0x88, 0, 0xCA, 0xDB, 'R', 'S', 'L', 'T', 0x23, 0};





/* Length of the common part of the message (up to and including the function code, see NOTE 2 below). */
#define ALL_MSG_COMMON_LEN 10
/* Indexes to access some of the fields in the frames defined above. */
#define ALL_MSG_SN_IDX            2
#define FINAL_MSG_POLL_TX_TS_IDX  10
#define FINAL_MSG_RESP_RX_TS_IDX  14
#define FINAL_MSG_FINAL_TX_TS_IDX 18
/* Frame sequence number, incremented after each transmission. */
static uint8_t frame_seq_nb = 0;

/* Buffer to store received response message.
 * Its size is adjusted to longest frame that this example code is supposed to handle. */
#define RX_BUF_LEN 20
static uint8_t rx_buffer_A[RX_BUF_LEN];
static uint8_t rx_buffer_B[RX_BUF_LEN];

/* Hold copy of status register state here for reference so that it can be examined at a debug breakpoint. */
//static uint32_t status_reg = 0;

/* Delay between frames, in UWB microseconds. See NOTE 4 below. */
/* This is the delay from the end of the frame transmission to the enable of the receiver, as programmed for the DW IC's wait for response feature. */
#define POLL_TX_TO_RESP_RX_DLY_UUS 50 // (300 + CPU_PROCESSING_TIME) // 300
/* This is the delay from Frame RX timestamp to TX reply timestamp used for calculating/setting the DW IC's delayed TX function.
 * This value is required to be larger than POLL_TX_TO_RESP_RX_DLY_UUS. Please see NOTE 4 for more details. */
#define RESP_RX_TO_FINAL_TX_DLY_UUS 100 // (300 + CPU_PROCESSING_TIME) //650
/* Receive response timeout. See NOTE 5 below. */
#define RESP_RX_TIMEOUT_UUS 650 // 650
/* Preamble timeout, in multiple of PAC size. See NOTE 7 below. */
#define PRE_TIMEOUT 5

/* Time-stamps of frames transmission/reception, expressed in device time units. */
static uint64_t poll_tx_ts;
static uint64_t resp_rx_ts;
static uint64_t final_tx_ts;



/* Values for the PG_DELAY and TX_POWER registers reflect the bandwidth and power of the spectrum at the current
 * temperature. These values can be calibrated prior to taking reference measurements. See NOTE 8 below. */
extern dwt_txconfig_t txconfig_options;

/*! ------------------------------------------------------------------------------------------------------------------
 * @fn ds_twr_initiator()
 *
 * @brief Application entry point.
 *
 * @param  none
 *
 * @return none
 */

void scanForSlave()
{
  int8_t scResult = WiFi.scanNetworks();

  for(int i = 0; i<scResult; ++i)
  {
    String SSID = WiFi.SSID(i);
    String BSSIDStr = WiFi.BSSIDstr(i);
    if(SSID.indexOf("RX") == 0)
    {
      Serial.println("slave found");
      int mac[6];
      if(6 == sscanf(BSSIDStr.c_str(),"%x:%x:%x:%x:%x:%x",&mac[0],&mac[1],&mac[2],&mac[3],&mac[4],&mac[5]))
      {
        for(int j = 0; j < 6; ++j)
        {
          slave_id.peer_addr[j] = (uint8_t) mac[j];
        }
         Serial.println("mac addr is set");
      }
      slave_id.channel = ESP_NOW_CH;
      slave_id.encrypt = 0;
      break;
    }
  }

}
void ondataSend(const uint8_t *macAddr,esp_now_send_status_t stat)
{
    Serial.println("esp now Data send");
    //Serial.println(myData.a);
}
void setup()
{
  UART_init();
  test_run_info((unsigned char *)APP_NAME);

  /* Configure SPI rate, DW3000 supports up to 38 MHz */
  /* Reset DW IC */
  spiBegin(PIN_IRQ, PIN_RST);
  spiSelect(PIN_SS);

  delay(2); // Time needed for DW3000 to start up (transition from INIT_RC to IDLE_RC, or could wait for SPIRDY event)

  while (!dwt_checkidlerc()) // Need to make sure DW IC is in IDLE_RC before proceeding 
  {
    UART_puts("IDLE FAILED\r\n");
    while (1) ;
  }

  if (dwt_initialise(DWT_DW_INIT) == DWT_ERROR)
  {
    UART_puts("INIT FAILED\r\n");
    while (1) ;
  }

  // Enabling LEDs here for debug so that for each TX the D1 LED will flash on DW3000 red eval-shield boards.
  dwt_setleds(DWT_LEDS_ENABLE | DWT_LEDS_INIT_BLINK);

  /* Configure DW IC. See NOTE 6 below. */
  if(dwt_configure(&config)) // if the dwt_configure returns DWT_ERROR either the PLL or RX calibration has failed the host should reset the device
  {
    UART_puts("CONFIG FAILED\r\n");
    while (1) ;
  }

    /* Configure the TX spectrum parameters (power, PG delay and PG count) */
    dwt_configuretxrf(&txconfig_options);

    /* Apply default antenna delay value. See NOTE 2 below. */
    dwt_setrxantennadelay(RX_ANT_DLY);
    dwt_settxantennadelay(TX_ANT_DLY);

    /* Set expected response's delay and timeout. See NOTE 1 and 5 below.
     * As this example only handles one incoming frame with always the same delay and timeout, those values can be set here once for all. */
    dwt_setrxaftertxdelay(POLL_TX_TO_RESP_RX_DLY_UUS);
    dwt_setrxtimeout(RESP_RX_TIMEOUT_UUS);

    /* Next can enable TX/RX states output on GPIOs 5 and 6 to help debug, and also TX/RX LEDs
     * Note, in real low power applications the LEDs should not be used. */
    dwt_setlnapamode(DWT_LNA_ENABLE | DWT_PA_ENABLE);
    /* Loop forever initiating ranging exchanges. */




    /*ESP NOW setup*/
    WiFi.mode(WIFI_STA);
    esp_now_init();
    esp_now_register_send_cb(ondataSend);
    scanForSlave();
   esp_now_add_peer(&slave_id);

}



void ranging_B()
{
  static uint32_t status_reg = 0;
      // After filtering
      /* Write frame data to DW IC and prepare transmission. See NOTE 9 below. */
      tx_poll_msg_B[ALL_MSG_SN_IDX] = frame_seq_nb;
      dwt_writetxdata(sizeof(tx_poll_msg_B), tx_poll_msg_B, 0);  /* Zero offset in TX buffer. */
      dwt_writetxfctrl(sizeof(tx_poll_msg_B) + FCS_LEN, 0, 1); /* Zero offset in TX buffer, ranging. */

      /* Start transmission, indicating that a response is expected so that reception is enabled automatically after the frame is sent and the delay
       * set by dwt_setrxaftertxdelay() has elapsed. */
      dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);

      /* We assume that the transmission is achieved correctly, poll for reception of a frame or error/timeout. See NOTE 10 below. */
      // waitforsysstatus(&status_reg, NULL, (DWT_INT_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR), 0);

      while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
      {
      };
      frame_seq_nb++;
      if (status_reg & SYS_STATUS_RXFCG_BIT_MASK)
      {
        uint16_t frame_len;

        /* Clear good RX frame event and TX frame sent in the DW IC status register. */
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_RXFCG_BIT_MASK);

        /* A frame has been received, read it into the local buffer. */
        frame_len = frame_len = dwt_read32bitreg(RX_FINFO_ID) & RXFLEN_MASK;
        if (frame_len <= RX_BUF_LEN)
        {
          dwt_readrxdata(rx_buffer_B, frame_len, 0);
          //Serial.println("recieved respond !");
        }

        /* Check that the frame is the expected response from the companion "DS TWR responder" example.
         * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
        rx_buffer_B[ALL_MSG_SN_IDX] = 0;
        if (memcmp(rx_buffer_B, rx_resp_msg_B, ALL_MSG_COMMON_LEN) == 0)
        {

          uint32_t final_tx_time;
          int ret;

          // Serial.println("recieve respond ");
          /* Retrieve poll transmission and response reception timestamp. */
          poll_tx_ts = get_tx_timestamp_u64();
          resp_rx_ts = get_rx_timestamp_u64();

          /* Compute final message transmission time. See NOTE 11 below. */
          final_tx_time = (resp_rx_ts + (RESP_RX_TO_FINAL_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
          dwt_setdelayedtrxtime(final_tx_time);

          /* Final TX timestamp is the transmission time we programmed plus the TX antenna delay. */
          final_tx_ts = (((uint64_t)(final_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY;

          /* Write all timestamps in the final message. See NOTE 12 below. */
          final_msg_set_ts(&tx_final_msg_B[FINAL_MSG_POLL_TX_TS_IDX], poll_tx_ts);
          final_msg_set_ts(&tx_final_msg_B[FINAL_MSG_RESP_RX_TS_IDX], resp_rx_ts);
          final_msg_set_ts(&tx_final_msg_B[FINAL_MSG_FINAL_TX_TS_IDX], final_tx_ts);

          /* Write and send final message. See NOTE 9 below. */
          tx_final_msg_B[ALL_MSG_SN_IDX] = frame_seq_nb;
          dwt_writetxdata(sizeof(tx_final_msg_B), tx_final_msg_B, 0); /* Zero offset in TX buffer. */
          dwt_writetxfctrl(sizeof(tx_final_msg_B) + FCS_LEN, 0, 1); /* Zero offset in TX buffer, ranging bit set. */
        
          ret = dwt_starttx(DWT_START_TX_DELAYED);
          // ret = dwt_starttx(DWT_START_TX_DELAYED | DWT_RESPONSE_EXPECTED);
          /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 13 below. */
          if (ret == DWT_SUCCESS)
          {

         // Serial.println("send final ");
         /* Poll DW IC until TX frame sent event set. See NOTE 10 below. */
         // while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS_BIT_MASK))
         //{};

         // wait for distance data to be send back
         // while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
         // {};
         /*

                  if (status_reg & SYS_STATUS_RXFCG_BIT_MASK)
                  {

                   dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_TXFRS_BIT_MASK);


                    frame_len = frame_len = dwt_read32bitreg(RX_FINFO_ID) & RXFLEN_MASK;
                    //Serial.println(frame_len);
                    if (frame_len <= RX_BUF_LEN)
                    {
                      dwt_readrxdata(rx_buffer_B, frame_len, 0);
                    }

                   if(memcmp(rx_buffer_B,tx_result_msg_B,ALL_MSG_COMMON_LEN) == 0){
                     // Serial.println("read final Data");
                     uint32_t tof_dtu;
                     double tof;
                     double distance;
                     // final_msg_get_ts(&rx_buffer[10],&tof_dtu);
                     tof_dtu  = rx_buffer_B[10];

                     tof_dtu = tof_dtu * 2;

                     tof = tof_dtu * DWT_TIME_UNITS;
                     distance = tof * SPEED_OF_LIGHT;

                    sprintf(dist_str, "DIST B: %3.2f m", distance);
                   // esp_now_send(slave_id.peer_addr,(uint8_t *)&dist_str,sizeof(dist_str));
                    Serial.println(dist_str);
                     //test_run_info((unsigned char *)dist_str);
                      //Serial.println(tof_dtu);
                     }

                  }
         */

         /* Clear TXFRS event. */
         dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS_BIT_MASK);

         /* Increment frame sequence number after transmission of the final message (modulo 256). */
         frame_seq_nb++;

         // Serial.println("send final End ");
          }
        }
      }
      else
      {
        /* Clear RX error/timeout events in the DW IC status register. */
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_TXFRS_BIT_MASK);
      }
      delay(1000);
}

void ranging_A()
{
 static uint32_t status_reg = 0;
      // After filtering
      /* Write frame data to DW IC and prepare transmission. See NOTE 9 below. */
      tx_poll_msg_A[ALL_MSG_SN_IDX] = frame_seq_nb;
      dwt_writetxdata(sizeof(tx_poll_msg_A), tx_poll_msg_A, 0);  /* Zero offset in TX buffer. */
      dwt_writetxfctrl(sizeof(tx_poll_msg_A) + FCS_LEN, 0, 1); /* Zero offset in TX buffer, ranging. */

      /* Start transmission, indicating that a response is expected so that reception is enabled automatically after the frame is sent and the delay
       * set by dwt_setrxaftertxdelay() has elapsed. */
      dwt_starttx(DWT_START_TX_IMMEDIATE | DWT_RESPONSE_EXPECTED);

      /* We assume that the transmission is achieved correctly, poll for reception of a frame or error/timeout. See NOTE 10 below. */
      // waitforsysstatus(&status_reg, NULL, (DWT_INT_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR), 0);

      while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
      {
      };
      frame_seq_nb++;
      if (status_reg & SYS_STATUS_RXFCG_BIT_MASK)
      {
        uint16_t frame_len;

        /* Clear good RX frame event and TX frame sent in the DW IC status register. */
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_RXFCG_BIT_MASK);

        /* A frame has been received, read it into the local buffer. */
        frame_len = frame_len = dwt_read32bitreg(RX_FINFO_ID) & RXFLEN_MASK;
        if (frame_len <= RX_BUF_LEN)
        {
          dwt_readrxdata(rx_buffer_A, frame_len, 0);
          //Serial.println("recieved respond !");
        }

        /* Check that the frame is the expected response from the companion "DS TWR responder" example.
         * As the sequence number field of the frame is not relevant, it is cleared to simplify the validation of the frame. */
        rx_buffer_A[ALL_MSG_SN_IDX] = 0;
        if (memcmp(rx_buffer_A, rx_resp_msg_A, ALL_MSG_COMMON_LEN) == 0)
        {

          uint32_t final_tx_time;
          int ret;

          // Serial.println("recieve respond ");
          /* Retrieve poll transmission and response reception timestamp. */
          poll_tx_ts = get_tx_timestamp_u64();
          resp_rx_ts = get_rx_timestamp_u64();

          /* Compute final message transmission time. See NOTE 11 below. */
          final_tx_time = (resp_rx_ts + (RESP_RX_TO_FINAL_TX_DLY_UUS * UUS_TO_DWT_TIME)) >> 8;
          dwt_setdelayedtrxtime(final_tx_time);

          /* Final TX timestamp is the transmission time we programmed plus the TX antenna delay. */
          final_tx_ts = (((uint64_t)(final_tx_time & 0xFFFFFFFEUL)) << 8) + TX_ANT_DLY;

          /* Write all timestamps in the final message. See NOTE 12 below. */
          final_msg_set_ts(&tx_final_msg_A[FINAL_MSG_POLL_TX_TS_IDX], poll_tx_ts);
          final_msg_set_ts(&tx_final_msg_A[FINAL_MSG_RESP_RX_TS_IDX], resp_rx_ts);
          final_msg_set_ts(&tx_final_msg_A[FINAL_MSG_FINAL_TX_TS_IDX], final_tx_ts);

          /* Write and send final message. See NOTE 9 below. */
          tx_final_msg_A[ALL_MSG_SN_IDX] = frame_seq_nb;
          dwt_writetxdata(sizeof(tx_final_msg_A), tx_final_msg_A, 0); /* Zero offset in TX buffer. */
          dwt_writetxfctrl(sizeof(tx_final_msg_A) + FCS_LEN, 0, 1); /* Zero offset in TX buffer, ranging bit set. */

          //ret = dwt_starttx(DWT_START_TX_DELAYED);
          ret = dwt_starttx(DWT_START_TX_DELAYED | DWT_RESPONSE_EXPECTED);
          /* If dwt_starttx() returns an error, abandon this ranging exchange and proceed to the next one. See NOTE 13 below. */
          if (ret == DWT_SUCCESS)
          {

            // Serial.println("send final ");
            /* Poll DW IC until TX frame sent event set. See NOTE 10 below. */
           // while (!(dwt_read32bitreg(SYS_STATUS_ID) & SYS_STATUS_TXFRS_BIT_MASK))
            //{};

            //wait for distance data to be send back
          while (!((status_reg = dwt_read32bitreg(SYS_STATUS_ID)) & (SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR)))
          {};

         if (status_reg & SYS_STATUS_RXFCG_BIT_MASK)
         {
          
          dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_RXFCG_BIT_MASK | SYS_STATUS_TXFRS_BIT_MASK);


           frame_len = frame_len = dwt_read32bitreg(RX_FINFO_ID) & RXFLEN_MASK;
           //Serial.println(frame_len);
           if (frame_len <= RX_BUF_LEN)
           {
             dwt_readrxdata(rx_buffer_A, frame_len, 0);
           }

          if(memcmp(rx_buffer_A,tx_result_msg_A,ALL_MSG_COMMON_LEN) == 0){
            // Serial.println("read final Data");
            uint32_t tof_dtu;
            double tof;
            double distance;
            // final_msg_get_ts(&rx_buffer[10],&tof_dtu);
            tof_dtu  = rx_buffer_A[10];

            tof_dtu = tof_dtu * 2;

            tof = tof_dtu * DWT_TIME_UNITS;
            distance = tof * SPEED_OF_LIGHT;
           sprintf(dist_str, "DIST B: %3.2f m", distance);

         // memcpy(&myData, dist_str, sizeof(dist_str));
          esp_now_send(slave_id.peer_addr,(uint8_t *)&dist_str,sizeof(dist_str));


          /*
                    for(int i = 0; i< sizeof(dist_str);++i)
          {
            myData.a[i] = dist_str[i];
          }
          */
            //test_run_info((unsigned char *)dist_str);
            //Serial.println(tof_dtu);
            }
         }

            /* Clear TXFRS event. */
            dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_TXFRS_BIT_MASK);

            /* Increment frame sequence number after transmission of the final message (modulo 256). */
            frame_seq_nb++;

            //Serial.println("send final End ");
          }
        }
      }
      else
      {
        /* Clear RX error/timeout events in the DW IC status register. */
        dwt_write32bitreg(SYS_STATUS_ID, SYS_STATUS_ALL_RX_TO | SYS_STATUS_ALL_RX_ERR | SYS_STATUS_TXFRS_BIT_MASK);
      }
      delay(1000);
}


void loop()
{       

  
     //  ranging_A();
     ranging_B();

    //esp_now_send(slave_id.peer_addr,(uint8_t *)&myData,sizeof(myData));
  
    
    delayMicroseconds(2);
}